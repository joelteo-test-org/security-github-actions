---
name: Security Credential Scan
on: 
  workflow_call:
jobs:
  CheckmarxSCA:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Checkmarx CxFlow Action
      uses: checkmarx-ts/checkmarx-cxflow-github-action@v1.4 # GitHub Action version
      with:
        project: ${{ github.repository }}-PR  # <-- Insert Checkmarx CxSCA Project Name
        sca_api_url: https://api.scacheckmarx.com
        sca_app_url: https://sca.scacheckmarx.com
        sca_access_control_url: https://platform.checkmarx.net
        sca_tenant: poloniex  # <-- Insert Checkmarx CxSCA Tenant
        sca_username: ${{ secrets.CHECKMARX_SCA_USERNAME }} # To be stored in GitHub Secrets.
        sca_password: ${{ secrets.CHECKMARX_SCA_PASSWORD }} # To be stored in GitHub Secrets.
        break_build: false
        scanners: sca
        bug_tracker: Sarif
        params: --namespace=${{ github.repository_owner }} --checkmarx.settings-override=true --repo-name=${{ github.event.repository.name }} --branch=${{ github.ref_name }} --repo-url="<GitHubRepoUrl>" --cx-flow.filterSeverity --cx-flow.filterCategory

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: cx.sarif
  # TruffleHog:
  #   runs-on: ubuntu-latest
  #   if: (github.actor != 'dependabot[bot]')
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - name: TruffleHog OSS
  #       uses: trufflesecurity/trufflehog@main
  #       with:
  #         path: ./
  #         base: ${{ github.event.repository.default_branch }}
  #         head: HEAD
  #         extra_args: --debug --only-verified  --exclude-detectors=slack
  #     - name: Display help
  #       if: failure()
  #       run: |
  #         echo "Credential found. See https://poloniex.atlassian.net/wiki/spaces/SEC/pages/2830959634 for guidance / remediation steps" >> $GITHUB_STEP_SUMMARY
  # CheckmarxSAST:
  #   # The type of runner that the job will run on - Ubuntu is required as Docker is leveraged for the action
  #   runs-on: sast
  #   permissions: write-all
  #   steps:
  #   # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #   - uses: actions/checkout@v2
  #   - name: Checkmarx CxFlow Action
  #     uses: checkmarx-ts/checkmarx-cxflow-github-action@v1.4
  #     with:
  #       project: ${{ github.repository }}-PR
  #       team: CxServer
  #       checkmarx_url: ${{ secrets.CHECKMARX_URL }}   # To be stored in GitHub Secrets.
  #       checkmarx_username: ${{ secrets.CHECKMARX_USERNAME }}  # To be stored in GitHub Secrets.
  #       checkmarx_password: ${{ secrets.CHECKMARX_PASSWORD }}  # To be stored in GitHub Secrets.
  #       checkmarx_client_secret: ${{ secrets.CHECKMARX_CLIENT_SECRET }}  # To be stored in GitHub Secrets.
  #       github_token: ${{ secrets.GITHUB_TOKEN }}
  #       incremental: true
  #       break_build: false
  #       scanners: sast
  #       bug_tracker: GITHUBPULL
  #       params: --namespace=${{ github.repository_owner }} --checkmarx.settings-override=true --repo-name=${{ github.event.repository.name }} --branch=${{ github.head_ref }} --merge-id=${{ github.event.number }} --cx-flow.filterSeverity --cx-flow.filterCategory
  # notification_job:
  #   if: failure()
  #   needs: [TruffleHog, CheckmarxSAST]
  #   name: Security Slack Notification
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Notify Slack
  #       env:
  #         GITHUB_CONTEXT: ${{ toJson(github) }}
  #         JOB_OUTPUTS: ${{ toJson(needs)}}
  #       run: |
  #         EVENT_NAME=$(echo $GITHUB_CONTEXT | jq -r .event_name ) 

  #         case $EVENT_NAME in 
  #         workflow_dispatch)
  #           TITLE="SAST Scan failed on $EVENT_NAME event at $(echo $GITHUB_CONTEXT | jq -r .event.repository.html_url)"
  #           ;;
  #         pull_request)
  #           TITLE="SAST Scan failed on $EVENT_NAME event at $(echo $GITHUB_CONTEXT | jq -r .event.pull_request._links.html.href)"
  #           ;;
  #         esac

  #         SLACK_MSG="$TITLE\nScan results\n\`\`\`$(echo $JOB_OUTPUTS | sed 's/"/\\"/g')\`\`\`"
  #         SLACK_MSG='{"text":"'$SLACK_MSG'"}'
  #         curl -X POST -H 'Content-type: application/json' --data "$SLACK_MSG" https://hooks.slack.com/services/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
  